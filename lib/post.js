// Generated by CoffeeScript 1.4.0
(function() {
  var ControlList, MyUtil, charm, clc, dirnameMap, dirnameWithYearMap, file, listFile, moment, newFile, parseArg, usage, util;

  util = require('util');

  moment = require('moment');

  clc = require('cli-color');

  charm = require('charm')();

  file = require('./file');

  usage = require('./usage');

  parseArg = require('./arg').parse;

  MyUtil = require('./MyUtil');

  dirnameWithYearMap = {
    post: './data/posts/{year}/',
    page: './data/pages/'
  };

  dirnameMap = {
    post: './data/posts',
    page: './data/pages'
  };

  ControlList = (function() {

    function ControlList(type, dirname, filter) {
      this.type = type;
      this.dirname = dirname;
      this.filter = filter;
      this.num = 0;
      this.listTip = "====================================";
      this.shortcutTip = "====================================\nShortcut: \n    " + (clc.yellow('"q"')) + "  ==>  quit.\n    " + (clc.yellow('"j"')) + "  ==>  selection up.\n    " + (clc.yellow('"k"')) + "  ==>  selection down.\n    " + (clc.yellow('"d"')) + "  ==>  delete " + type + ".";
      this._createRoot();
      charm.pipe(process.stdout);
      charm.reset();
      this._rend();
      this._bindEvent();
    }

    ControlList.prototype._createRoot = function() {
      this.rootNode = file.tree(this.dirname, this.filter);
      if (this.rootNode.notExists) {
        util.puts('Path "' + this.rootNode.name + '" not existed.');
      }
      return this.mdLength = this.getMdFiles().length;
    };

    ControlList.prototype.iterate = function(callback) {
      var iterate;
      iterate = function(node) {
        var child, _i, _len, _ref, _results;
        if (node.children) {
          _ref = node.children;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            child = _ref[_i];
            _results.push(iterate(child));
          }
          return _results;
        } else {
          return callback(node);
        }
      };
      return iterate(this.rootNode);
    };

    ControlList.prototype.getMdFiles = function() {
      var files;
      files = [];
      this.iterate(function(node) {
        return files.push(node);
      });
      return files;
    };

    ControlList.prototype.selectFile = function(num) {
      this.num = this._resolveNum(num);
      return this._rend();
    };

    ControlList.prototype.getSelectedFile = function() {
      var num;
      num = this._resolveNum(num);
      return this.getMdFiles()[num];
    };

    ControlList.prototype.deleteFile = function(num) {
      var selectFile;
      charm.erase('screen');
      selectFile = this.getSelectedFile(num);
      if (selectFile && !selectFile.children) {
        file.trash(selectFile.name);
        this.msg = '\nFile "' + file.getFileName(selectFile.name) + '" deleted.\nUse "blogin trash" command to recover deleted file.';
        this._createRoot();
        return this._rend();
      } else {
        this.msg = 'Nothing selected.';
        return this._rend();
      }
    };

    ControlList.prototype.newFile = function(titles) {
      var content, dataFile, dirname, filename;
      charm.erase('screen');
      filename = file.titleToPath(titles);
      if (filename === 'index.md') {
        util.puts("Can\'t use \"index\" as " + this.type + " title");
        return;
      }
      content = titles + '\n======\n';
      dirname = dirnameWithYearMap[type].replace('{year}', moment().format('YYYY'));
      dataFile = dirname + filename;
      if (file.writeIfNotExist(dataFile, content)) {
        this.msg = 'Created at ' + dataFile;
        MyUtil.addInfo(type, dataFile);
        this._createRoot();
        return this._rend();
      } else {
        this.msg = 'Fail to create, file "' + dataFile + '" was existed.\nUse [-f] option to rewrite the file.';
        return this._rend();
      }
    };

    ControlList.prototype._resolveNum = function(num) {
      if ((num != null)) {
        if (num < 0) {
          return num + this.mdLength;
        } else {
          return num % this.mdLength;
        }
      } else {
        return this.num;
      }
    };

    ControlList.prototype._rend = function() {
      charm.erase('down');
      charm.cursor(false);
      charm.position(0, 0);
      this._rendTree();
      util.puts(this.shortcutTip);
      charm.cursor(true);
      return this._printStatus();
    };

    ControlList.prototype._rendTree = function() {
      var iterate, level, num,
        _this = this;
      util.puts(this.listTip);
      level = -1;
      num = -1;
      iterate = function(node) {
        var child, filename, i, indent, l, limit, symbol, _i, _len, _ref;
        level++;
        indent = '';
        i = 0;
        l = level * 4;
        limit = l - 3;
        while (i < l) {
          i++;
          if (i < limit) {
            symbol = ' ';
          }
          if (i === limit) {
            symbol = '|';
          }
          if (i > limit) {
            symbol = '-';
          }
          indent += symbol;
        }
        if (file.isMd(node.name)) {
          filename = file.pathToTitle(node.name);
          num++;
          if (num === _this.num) {
            filename = clc.underline(filename);
            indent = indent.replace(/-/g, '>');
          }
        } else {
          filename = file.getFileName(node.name);
        }
        util.puts(indent + ' ' + filename);
        if (node.children) {
          _ref = node.children;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            child = _ref[_i];
            iterate(child);
          }
        }
        return level--;
      };
      return iterate(this.rootNode);
    };

    ControlList.prototype._bindEvent = function() {
      var newTitle, stdin,
        _this = this;
      stdin = process.stdin;
      stdin.setRawMode(true);
      stdin.resume();
      stdin.setEncoding('utf8');
      newTitle = '';
      return stdin.on('data', function(key) {
        if (key === '\u0003') {
          process.exit();
        }
        /*
        			if (key is '\u000A' or key is '\u000D')
        				@_isPrompting = false
        				this.newFile(newTitle)
        
        			if (@_isPrompting)
        				newTitle += key
        				process.stdout.write(key)
        				return
        */

        switch (key) {
          case 'q':
            return process.exit();
          case 'd':
            return _this.deleteFile();
          case 'j':
            return _this.selectFile(_this.num + 1);
          case 'k':
            return _this.selectFile(_this.num - 1);
        }
        /*
        			when 'a'
        				@_isPrompting = true
        				util.print('\nPlease input post title:')
        */

      });
    };

    ControlList.prototype._printStatus = function() {
      if ((this.msg != null)) {
        return util.puts(this.msg);
      }
    };

    return ControlList;

  })();

  module.exports = function(args) {
    var arg, filename, type;
    type = 'post';
    arg = parseArg(args);
    if (args.length === 0) {
      listFile(type);
      return;
    }
    if (arg.req.length === 0) {
      usage.puts(type);
      return;
    }
    filename = file.titleToPath(arg.req);
    if (filename === 'index.md') {
      usage.puts(type);
      return;
    }
    return newFile(arg, filename, type);
  };

  newFile = module.exports.newFile = function(arg, filename, type) {
    var content, dataFile, dirname, postTitle;
    postTitle = arg.req.join(' ');
    content = postTitle + '\n======\n';
    dirname = dirnameWithYearMap[type].replace('{year}', moment().format('YYYY'));
    dataFile = dirname + filename;
    if (~arg.opt.indexOf('f')) {
      file.write(dataFile, content);
      util.puts('Created at ' + dataFile);
      return MyUtil.addInfo(type, dataFile);
    } else {
      if (file.writeIfNotExist(dataFile, content)) {
        util.puts('Created at ' + dataFile);
        return MyUtil.addInfo(type, dataFile);
      } else {
        return util.puts('Fail to create, file "' + dataFile + '" was existed.\nUse [-f] option to rewrite the file.');
      }
    }
  };

  listFile = module.exports.listFile = function(type) {
    var dirname, filter,
      _this = this;
    dirname = dirnameMap[type];
    filter = function(filename) {
      return file.isDir(filename) || file.isMd(filename);
    };
    return new ControlList(type, dirname, filter);
  };

}).call(this);
